#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Test Notebook
I want to see how the C# notebooks work (using the `Polyglot` extension in VS Code)...

#!csharp

var range = Enumerable.Range(0,50);
var g = from n in range where n > 2 select n*n;

#!markdown

So this is how it starts.  Now, let's see how it ends!

#!csharp

foreach(var (num,idx) in g.Zip(Enumerable.Range(1,10)))
{
    Console.WriteLine($"{idx}: {num}");
}

#!markdown

... very satisfying.

#!csharp

System.IO.Directory.GetCurrentDirectory()

#!markdown

... ok, so it seems to set the current directory to the location of the .dib file.  So I should be able to load some test data.

#!csharp

var td = System.IO.File.ReadAllBytes("first-test.data");
td

#!markdown

We sure can!

#!csharp

Encoding.UTF8.GetString(td)

#!markdown

## DLLs
Let's see if I can point it to a DLL and load it...

#!csharp

#r "../../small-csharp-libs/romanized-text/RWTodd.RomanizedText/RWTodd.RomanizedText.dll"

#!csharp

using RWTodd.RomanizedText;
Greek.Convert("THELEMA")

#!markdown

... yes I can!  It works ok.
